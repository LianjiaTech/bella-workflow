/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables.daos;


import com.ke.bella.workflow.db.tables.WorkflowRuns;
import com.ke.bella.workflow.db.tables.pojos.WorkflowRunsDB;
import com.ke.bella.workflow.db.tables.records.WorkflowRunsRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowRunsDBDao extends DAOImpl<WorkflowRunsRecord, WorkflowRunsDB, Long> {

    /**
     * Create a new WorkflowRunsDBDao without any configuration
     */
    public WorkflowRunsDBDao() {
        super(WorkflowRuns.WORKFLOW_RUNS, WorkflowRunsDB.class);
    }

    /**
     * Create a new WorkflowRunsDBDao with an attached configuration
     */
    public WorkflowRunsDBDao(Configuration configuration) {
        super(WorkflowRuns.WORKFLOW_RUNS, WorkflowRunsDB.class, configuration);
    }

    @Override
    public Long getId(WorkflowRunsDB object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchById(Long... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WorkflowRunsDB fetchOneById(Long value) {
        return fetchOne(WorkflowRuns.WORKFLOW_RUNS.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfTenantId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByTenantId(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>workflow_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfWorkflowId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.WORKFLOW_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_id IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByWorkflowId(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.WORKFLOW_ID, values);
    }

    /**
     * Fetch records that have <code>workflow_run_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfWorkflowRunId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.WORKFLOW_RUN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_run_id IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByWorkflowRunId(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.WORKFLOW_RUN_ID, values);
    }

    /**
     * Fetch a unique record that has <code>workflow_run_id = value</code>
     */
    public WorkflowRunsDB fetchOneByWorkflowRunId(String value) {
        return fetchOne(WorkflowRuns.WORKFLOW_RUNS.WORKFLOW_RUN_ID, value);
    }

    /**
     * Fetch records that have <code>trigger_from BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfTriggerFrom(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.TRIGGER_FROM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>trigger_from IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByTriggerFrom(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.TRIGGER_FROM, values);
    }

    /**
     * Fetch records that have <code>inputs BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfInputs(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.INPUTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>inputs IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByInputs(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.INPUTS, values);
    }

    /**
     * Fetch records that have <code>outputs BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfOutputs(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.OUTPUTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>outputs IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByOutputs(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.OUTPUTS, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByStatus(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.STATUS, values);
    }

    /**
     * Fetch records that have <code>error BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfError(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.ERROR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>error IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByError(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.ERROR, values);
    }

    /**
     * Fetch records that have <code>cuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfCuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.CUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cuid IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByCuid(Long... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.CUID, values);
    }

    /**
     * Fetch records that have <code>cu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfCuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.CU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cu_name IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByCuName(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.CU_NAME, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfCtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByCtime(LocalDateTime... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.CTIME, values);
    }

    /**
     * Fetch records that have <code>muid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfMuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.MUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>muid IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByMuid(Long... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.MUID, values);
    }

    /**
     * Fetch records that have <code>mu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfMuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.MU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mu_name IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByMuName(String... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.MU_NAME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunsDB> fetchRangeOfMtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WorkflowRuns.WORKFLOW_RUNS.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<WorkflowRunsDB> fetchByMtime(LocalDateTime... values) {
        return fetch(WorkflowRuns.WORKFLOW_RUNS.MTIME, values);
    }
}
