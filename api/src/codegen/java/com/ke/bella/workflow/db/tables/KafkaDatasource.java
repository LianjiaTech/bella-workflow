/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Indexes;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.KafkaDatasourceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KafkaDatasource extends TableImpl<KafkaDatasourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kafka_datasource</code>
     */
    public static final KafkaDatasource KAFKA_DATASOURCE = new KafkaDatasource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KafkaDatasourceRecord> getRecordType() {
        return KafkaDatasourceRecord.class;
    }

    /**
     * The column <code>kafka_datasource.id</code>.
     */
    public final TableField<KafkaDatasourceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>kafka_datasource.tenant_id</code>. 租户ID
     */
    public final TableField<KafkaDatasourceRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(64).nullable(false), this, "租户ID");

    /**
     * The column <code>kafka_datasource.datasource_id</code>.
     */
    public final TableField<KafkaDatasourceRecord, String> DATASOURCE_ID = createField(DSL.name("datasource_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>kafka_datasource.space_code</code>.
     */
    public final TableField<KafkaDatasourceRecord, String> SPACE_CODE = createField(DSL.name("space_code"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("PERSONNAL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kafka_datasource.type</code>. kafka数据源类型producer, consumer
     */
    public final TableField<KafkaDatasourceRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("consumer", SQLDataType.VARCHAR)), this, "kafka数据源类型producer, consumer");

    /**
     * The column <code>kafka_datasource.server</code>. kafka服务地址
host:port
     */
    public final TableField<KafkaDatasourceRecord, String> SERVER = createField(DSL.name("server"), SQLDataType.VARCHAR(512).nullable(false), this, "kafka服务地址\nhost:port");

    /**
     * The column <code>kafka_datasource.topic</code>. Kafka topic
     */
    public final TableField<KafkaDatasourceRecord, String> TOPIC = createField(DSL.name("topic"), SQLDataType.VARCHAR(255).nullable(false), this, "Kafka topic");

    /**
     * The column <code>kafka_datasource.name</code>. 数据源名称
     */
    public final TableField<KafkaDatasourceRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "数据源名称");

    /**
     * The column <code>kafka_datasource.msg_schema</code>. 消息体的json schema
     */
    public final TableField<KafkaDatasourceRecord, String> MSG_SCHEMA = createField(DSL.name("msg_schema"), SQLDataType.CLOB.nullable(false), this, "消息体的json schema");

    /**
     * The column <code>kafka_datasource.status</code>. 数据源状态
-1: 无笑
0: 生效
     */
    public final TableField<KafkaDatasourceRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "数据源状态\n-1: 无笑\n0: 生效");

    /**
     * The column <code>kafka_datasource.cuid</code>.
     */
    public final TableField<KafkaDatasourceRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>kafka_datasource.muid</code>.
     */
    public final TableField<KafkaDatasourceRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>kafka_datasource.ctime</code>.
     */
    public final TableField<KafkaDatasourceRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>kafka_datasource.mtime</code>.
     */
    public final TableField<KafkaDatasourceRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>kafka_datasource.cu_name</code>.
     */
    public final TableField<KafkaDatasourceRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kafka_datasource.mu_name</code>.
     */
    public final TableField<KafkaDatasourceRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private KafkaDatasource(Name alias, Table<KafkaDatasourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private KafkaDatasource(Name alias, Table<KafkaDatasourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>kafka_datasource</code> table reference
     */
    public KafkaDatasource(String alias) {
        this(DSL.name(alias), KAFKA_DATASOURCE);
    }

    /**
     * Create an aliased <code>kafka_datasource</code> table reference
     */
    public KafkaDatasource(Name alias) {
        this(alias, KAFKA_DATASOURCE);
    }

    /**
     * Create a <code>kafka_datasource</code> table reference
     */
    public KafkaDatasource() {
        this(DSL.name("kafka_datasource"), null);
    }

    public <O extends Record> KafkaDatasource(Table<O> child, ForeignKey<O, KafkaDatasourceRecord> key) {
        super(child, key, KAFKA_DATASOURCE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KAFKA_DATASOURCE_IDX_T_SPACE_TOPIC);
    }

    @Override
    public Identity<KafkaDatasourceRecord, Long> getIdentity() {
        return (Identity<KafkaDatasourceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<KafkaDatasourceRecord> getPrimaryKey() {
        return Keys.KEY_KAFKA_DATASOURCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<KafkaDatasourceRecord>> getKeys() {
        return Arrays.<UniqueKey<KafkaDatasourceRecord>>asList(Keys.KEY_KAFKA_DATASOURCE_PRIMARY, Keys.KEY_KAFKA_DATASOURCE_IDX_ID);
    }

    @Override
    public KafkaDatasource as(String alias) {
        return new KafkaDatasource(DSL.name(alias), this);
    }

    @Override
    public KafkaDatasource as(Name alias) {
        return new KafkaDatasource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KafkaDatasource rename(String name) {
        return new KafkaDatasource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KafkaDatasource rename(Name name) {
        return new KafkaDatasource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, String, String, String, String, String, String, String, String, Integer, Long, Long, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
