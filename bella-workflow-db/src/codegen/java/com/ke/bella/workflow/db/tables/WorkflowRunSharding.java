/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Indexes;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.WorkflowRunShardingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowRunSharding extends TableImpl<WorkflowRunShardingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>workflow_run_sharding</code>
     */
    public static final WorkflowRunSharding WORKFLOW_RUN_SHARDING = new WorkflowRunSharding();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowRunShardingRecord> getRecordType() {
        return WorkflowRunShardingRecord.class;
    }

    /**
     * The column <code>workflow_run_sharding.id</code>.
     */
    public final TableField<WorkflowRunShardingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>workflow_run_sharding.key</code>. 分表的标识，
对应的表+’_’+key即是实际读写的表
     */
    public final TableField<WorkflowRunShardingRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "分表的标识，\n对应的表+’_’+key即是实际读写的表");

    /**
     * The column <code>workflow_run_sharding.key_time</code>.
     */
    public final TableField<WorkflowRunShardingRecord, LocalDateTime> KEY_TIME = createField(DSL.name("key_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>workflow_run_sharding.last_key</code>.
     */
    public final TableField<WorkflowRunShardingRecord, String> LAST_KEY = createField(DSL.name("last_key"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>workflow_run_sharding.count</code>. 分表的记录数量
     */
    public final TableField<WorkflowRunShardingRecord, Long> COUNT = createField(DSL.name("count"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "分表的记录数量");

    /**
     * The column <code>workflow_run_sharding.max_count</code>. 分表的最大记录数
如果count&gt;max_count， 创建新表
     */
    public final TableField<WorkflowRunShardingRecord, Long> MAX_COUNT = createField(DSL.name("max_count"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("20000000", SQLDataType.BIGINT)), this, "分表的最大记录数\n如果count>max_count， 创建新表");

    /**
     * The column <code>workflow_run_sharding.ctime</code>.
     */
    public final TableField<WorkflowRunShardingRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>workflow_run_sharding.cu_name</code>.
     */
    public final TableField<WorkflowRunShardingRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_run_sharding.cuid</code>.
     */
    public final TableField<WorkflowRunShardingRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflow_run_sharding.mtime</code>.
     */
    public final TableField<WorkflowRunShardingRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>workflow_run_sharding.mu_name</code>.
     */
    public final TableField<WorkflowRunShardingRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_run_sharding.muid</code>.
     */
    public final TableField<WorkflowRunShardingRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    private WorkflowRunSharding(Name alias, Table<WorkflowRunShardingRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowRunSharding(Name alias, Table<WorkflowRunShardingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>workflow_run_sharding</code> table reference
     */
    public WorkflowRunSharding(String alias) {
        this(DSL.name(alias), WORKFLOW_RUN_SHARDING);
    }

    /**
     * Create an aliased <code>workflow_run_sharding</code> table reference
     */
    public WorkflowRunSharding(Name alias) {
        this(alias, WORKFLOW_RUN_SHARDING);
    }

    /**
     * Create a <code>workflow_run_sharding</code> table reference
     */
    public WorkflowRunSharding() {
        this(DSL.name("workflow_run_sharding"), null);
    }

    public <O extends Record> WorkflowRunSharding(Table<O> child, ForeignKey<O, WorkflowRunShardingRecord> key) {
        super(child, key, WORKFLOW_RUN_SHARDING);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_RUN_SHARDING_IDX_LAST_KEY);
    }

    @Override
    public Identity<WorkflowRunShardingRecord, Long> getIdentity() {
        return (Identity<WorkflowRunShardingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkflowRunShardingRecord> getPrimaryKey() {
        return Keys.KEY_WORKFLOW_RUN_SHARDING_PRIMARY;
    }

    @Override
    public List<UniqueKey<WorkflowRunShardingRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowRunShardingRecord>>asList(Keys.KEY_WORKFLOW_RUN_SHARDING_PRIMARY, Keys.KEY_WORKFLOW_RUN_SHARDING_IDX_KEY);
    }

    @Override
    public WorkflowRunSharding as(String alias) {
        return new WorkflowRunSharding(DSL.name(alias), this);
    }

    @Override
    public WorkflowRunSharding as(Name alias) {
        return new WorkflowRunSharding(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowRunSharding rename(String name) {
        return new WorkflowRunSharding(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowRunSharding rename(Name name) {
        return new WorkflowRunSharding(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, LocalDateTime, String, Long, Long, LocalDateTime, String, Long, LocalDateTime, String, Long> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
