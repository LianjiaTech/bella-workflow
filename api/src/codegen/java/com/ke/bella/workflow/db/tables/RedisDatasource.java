/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Indexes;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.RedisDatasourceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RedisDatasource extends TableImpl<RedisDatasourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>redis_datasource</code>
     */
    public static final RedisDatasource REDIS_DATASOURCE = new RedisDatasource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RedisDatasourceRecord> getRecordType() {
        return RedisDatasourceRecord.class;
    }

    /**
     * The column <code>redis_datasource.id</code>.
     */
    public final TableField<RedisDatasourceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>redis_datasource.tenant_id</code>. 租户ID
     */
    public final TableField<RedisDatasourceRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(64).nullable(false), this, "租户ID");

    /**
     * The column <code>redis_datasource.datasource_id</code>.
     */
    public final TableField<RedisDatasourceRecord, String> DATASOURCE_ID = createField(DSL.name("datasource_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>redis_datasource.space_code</code>.
     */
    public final TableField<RedisDatasourceRecord, String> SPACE_CODE = createField(DSL.name("space_code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>redis_datasource.host</code>. 主机
     */
    public final TableField<RedisDatasourceRecord, String> HOST = createField(DSL.name("host"), SQLDataType.VARCHAR(512).nullable(false), this, "主机");

    /**
     * The column <code>redis_datasource.port</code>. 端口
     */
    public final TableField<RedisDatasourceRecord, Integer> PORT = createField(DSL.name("port"), SQLDataType.INTEGER.nullable(false), this, "端口");

    /**
     * The column <code>redis_datasource.db</code>. 默认数据库
     */
    public final TableField<RedisDatasourceRecord, Integer> DB = createField(DSL.name("db"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "默认数据库");

    /**
     * The column <code>redis_datasource.user</code>. 用户名
     */
    public final TableField<RedisDatasourceRecord, String> USER = createField(DSL.name("user"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "用户名");

    /**
     * The column <code>redis_datasource.password</code>. 密码
     */
    public final TableField<RedisDatasourceRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "密码");

    /**
     * The column <code>redis_datasource.status</code>. 数据源状态
-1: 无笑
0: 生效
     */
    public final TableField<RedisDatasourceRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "数据源状态\n-1: 无笑\n0: 生效");

    /**
     * The column <code>redis_datasource.cuid</code>.
     */
    public final TableField<RedisDatasourceRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>redis_datasource.muid</code>.
     */
    public final TableField<RedisDatasourceRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>redis_datasource.ctime</code>.
     */
    public final TableField<RedisDatasourceRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>redis_datasource.mtime</code>.
     */
    public final TableField<RedisDatasourceRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>redis_datasource.cu_name</code>.
     */
    public final TableField<RedisDatasourceRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>redis_datasource.mu_name</code>.
     */
    public final TableField<RedisDatasourceRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private RedisDatasource(Name alias, Table<RedisDatasourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private RedisDatasource(Name alias, Table<RedisDatasourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>redis_datasource</code> table reference
     */
    public RedisDatasource(String alias) {
        this(DSL.name(alias), REDIS_DATASOURCE);
    }

    /**
     * Create an aliased <code>redis_datasource</code> table reference
     */
    public RedisDatasource(Name alias) {
        this(alias, REDIS_DATASOURCE);
    }

    /**
     * Create a <code>redis_datasource</code> table reference
     */
    public RedisDatasource() {
        this(DSL.name("redis_datasource"), null);
    }

    public <O extends Record> RedisDatasource(Table<O> child, ForeignKey<O, RedisDatasourceRecord> key) {
        super(child, key, REDIS_DATASOURCE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REDIS_DATASOURCE_IDX_T_SPACE_TOPIC);
    }

    @Override
    public Identity<RedisDatasourceRecord, Long> getIdentity() {
        return (Identity<RedisDatasourceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RedisDatasourceRecord> getPrimaryKey() {
        return Keys.KEY_REDIS_DATASOURCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<RedisDatasourceRecord>> getKeys() {
        return Arrays.<UniqueKey<RedisDatasourceRecord>>asList(Keys.KEY_REDIS_DATASOURCE_PRIMARY, Keys.KEY_REDIS_DATASOURCE_IDX_ID);
    }

    @Override
    public RedisDatasource as(String alias) {
        return new RedisDatasource(DSL.name(alias), this);
    }

    @Override
    public RedisDatasource as(Name alias) {
        return new RedisDatasource(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RedisDatasource rename(String name) {
        return new RedisDatasource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RedisDatasource rename(Name name) {
        return new RedisDatasource(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, String, String, String, String, Integer, Integer, String, String, Integer, Long, Long, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
