/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Indexes;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.DomainRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Domain extends TableImpl<DomainRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>domain</code>
     */
    public static final Domain DOMAIN = new Domain();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DomainRecord> getRecordType() {
        return DomainRecord.class;
    }

    /**
     * The column <code>domain.id</code>.
     */
    public final TableField<DomainRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>domain.tenant_id</code>. 租户ID
     */
    public final TableField<DomainRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(64).nullable(false), this, "租户ID");

    /**
     * The column <code>domain.space_code</code>.
     */
    public final TableField<DomainRecord, String> SPACE_CODE = createField(DSL.name("space_code"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("PERSONNAL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>domain.domain</code>. 域名
     */
    public final TableField<DomainRecord, String> DOMAIN_ = createField(DSL.name("domain"), SQLDataType.VARCHAR(512).nullable(false), this, "域名");

    /**
     * The column <code>domain.custom</code>. 是否自定义域名
     */
    public final TableField<DomainRecord, Integer> CUSTOM = createField(DSL.name("custom"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "是否自定义域名");

    /**
     * The column <code>domain.desc</code>. 描述
     */
    public final TableField<DomainRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.VARCHAR(512).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "描述");

    /**
     * The column <code>domain.cuid</code>.
     */
    public final TableField<DomainRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>domain.muid</code>.
     */
    public final TableField<DomainRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>domain.ctime</code>.
     */
    public final TableField<DomainRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>domain.mtime</code>.
     */
    public final TableField<DomainRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>domain.cu_name</code>.
     */
    public final TableField<DomainRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>domain.mu_name</code>.
     */
    public final TableField<DomainRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private Domain(Name alias, Table<DomainRecord> aliased) {
        this(alias, aliased, null);
    }

    private Domain(Name alias, Table<DomainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>domain</code> table reference
     */
    public Domain(String alias) {
        this(DSL.name(alias), DOMAIN);
    }

    /**
     * Create an aliased <code>domain</code> table reference
     */
    public Domain(Name alias) {
        this(alias, DOMAIN);
    }

    /**
     * Create a <code>domain</code> table reference
     */
    public Domain() {
        this(DSL.name("domain"), null);
    }

    public <O extends Record> Domain(Table<O> child, ForeignKey<O, DomainRecord> key) {
        super(child, key, DOMAIN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOMAIN_IDX_T_SPACE_TOPIC);
    }

    @Override
    public Identity<DomainRecord, Long> getIdentity() {
        return (Identity<DomainRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DomainRecord> getPrimaryKey() {
        return Keys.KEY_DOMAIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<DomainRecord>> getKeys() {
        return Arrays.<UniqueKey<DomainRecord>>asList(Keys.KEY_DOMAIN_PRIMARY);
    }

    @Override
    public Domain as(String alias) {
        return new Domain(DSL.name(alias), this);
    }

    @Override
    public Domain as(Name alias) {
        return new Domain(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Domain rename(String name) {
        return new Domain(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Domain rename(Name name) {
        return new Domain(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, String, String, Integer, String, Long, Long, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
