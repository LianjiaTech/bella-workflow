/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables.daos;


import com.ke.bella.workflow.db.tables.WorkflowNodeRun;
import com.ke.bella.workflow.db.tables.pojos.WorkflowNodeRunDB;
import com.ke.bella.workflow.db.tables.records.WorkflowNodeRunRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowNodeRunDBDao extends DAOImpl<WorkflowNodeRunRecord, WorkflowNodeRunDB, Long> {

    /**
     * Create a new WorkflowNodeRunDBDao without any configuration
     */
    public WorkflowNodeRunDBDao() {
        super(WorkflowNodeRun.WORKFLOW_NODE_RUN, WorkflowNodeRunDB.class);
    }

    /**
     * Create a new WorkflowNodeRunDBDao with an attached configuration
     */
    public WorkflowNodeRunDBDao(Configuration configuration) {
        super(WorkflowNodeRun.WORKFLOW_NODE_RUN, WorkflowNodeRunDB.class, configuration);
    }

    @Override
    public Long getId(WorkflowNodeRunDB object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchById(Long... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WorkflowNodeRunDB fetchOneById(Long value) {
        return fetchOne(WorkflowNodeRun.WORKFLOW_NODE_RUN.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfTenantId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByTenantId(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>workflow_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfWorkflowId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.WORKFLOW_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_id IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByWorkflowId(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.WORKFLOW_ID, values);
    }

    /**
     * Fetch records that have <code>workflow_run_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfWorkflowRunId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.WORKFLOW_RUN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_run_id IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByWorkflowRunId(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.WORKFLOW_RUN_ID, values);
    }

    /**
     * Fetch records that have <code>node_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfNodeId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.NODE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>node_id IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByNodeId(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.NODE_ID, values);
    }

    /**
     * Fetch records that have <code>node_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfNodeType(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.NODE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>node_type IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByNodeType(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.NODE_TYPE, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByTitle(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.TITLE, values);
    }

    /**
     * Fetch records that have <code>inputs BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfInputs(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.INPUTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>inputs IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByInputs(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.INPUTS, values);
    }

    /**
     * Fetch records that have <code>outputs BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfOutputs(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.OUTPUTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>outputs IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByOutputs(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.OUTPUTS, values);
    }

    /**
     * Fetch records that have <code>error BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfError(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.ERROR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>error IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByError(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.ERROR, values);
    }

    /**
     * Fetch records that have <code>process_data BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfProcessData(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.PROCESS_DATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>process_data IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByProcessData(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.PROCESS_DATA, values);
    }

    /**
     * Fetch records that have <code>actived_target_handles BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfActivedTargetHandles(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.ACTIVED_TARGET_HANDLES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>actived_target_handles IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByActivedTargetHandles(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.ACTIVED_TARGET_HANDLES, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByStatus(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.STATUS, values);
    }

    /**
     * Fetch records that have <code>elapsed_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfElapsedTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.ELAPSED_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>elapsed_time IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByElapsedTime(Long... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.ELAPSED_TIME, values);
    }

    /**
     * Fetch records that have <code>cuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfCuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.CUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cuid IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByCuid(Long... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.CUID, values);
    }

    /**
     * Fetch records that have <code>cu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfCuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.CU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cu_name IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByCuName(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.CU_NAME, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfCtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByCtime(LocalDateTime... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.CTIME, values);
    }

    /**
     * Fetch records that have <code>muid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfMuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.MUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>muid IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByMuid(Long... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.MUID, values);
    }

    /**
     * Fetch records that have <code>mu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfMuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.MU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mu_name IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByMuName(String... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.MU_NAME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunDB> fetchRangeOfMtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WorkflowNodeRun.WORKFLOW_NODE_RUN.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<WorkflowNodeRunDB> fetchByMtime(LocalDateTime... values) {
        return fetch(WorkflowNodeRun.WORKFLOW_NODE_RUN.MTIME, values);
    }
}
