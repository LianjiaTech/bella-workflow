/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.TenantRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tenant extends TableImpl<TenantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tenant</code>
     */
    public static final Tenant TENANT = new Tenant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TenantRecord> getRecordType() {
        return TenantRecord.class;
    }

    /**
     * The column <code>tenant.id</code>.
     */
    public final TableField<TenantRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>tenant.tenant_id</code>.
     */
    public final TableField<TenantRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>tenant.tenant_name</code>.
     */
    public final TableField<TenantRecord, String> TENANT_NAME = createField(DSL.name("tenant_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>tenant.cuid</code>.
     */
    public final TableField<TenantRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tenant.cu_name</code>.
     */
    public final TableField<TenantRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>tenant.ctime</code>.
     */
    public final TableField<TenantRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>tenant.muid</code>.
     */
    public final TableField<TenantRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tenant.mu_name</code>.
     */
    public final TableField<TenantRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>tenant.mtime</code>.
     */
    public final TableField<TenantRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Tenant(Name alias, Table<TenantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tenant(Name alias, Table<TenantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tenant</code> table reference
     */
    public Tenant(String alias) {
        this(DSL.name(alias), TENANT);
    }

    /**
     * Create an aliased <code>tenant</code> table reference
     */
    public Tenant(Name alias) {
        this(alias, TENANT);
    }

    /**
     * Create a <code>tenant</code> table reference
     */
    public Tenant() {
        this(DSL.name("tenant"), null);
    }

    public <O extends Record> Tenant(Table<O> child, ForeignKey<O, TenantRecord> key) {
        super(child, key, TENANT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TenantRecord, Long> getIdentity() {
        return (Identity<TenantRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TenantRecord> getPrimaryKey() {
        return Keys.KEY_TENANT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TenantRecord>> getKeys() {
        return Arrays.<UniqueKey<TenantRecord>>asList(Keys.KEY_TENANT_PRIMARY);
    }

    @Override
    public Tenant as(String alias) {
        return new Tenant(DSL.name(alias), this);
    }

    @Override
    public Tenant as(Name alias) {
        return new Tenant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(String name) {
        return new Tenant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(Name name) {
        return new Tenant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Long, String, LocalDateTime, Long, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
