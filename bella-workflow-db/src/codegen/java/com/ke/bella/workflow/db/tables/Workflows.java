/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Indexes;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.WorkflowsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Workflows extends TableImpl<WorkflowsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>workflows</code>
     */
    public static final Workflows WORKFLOWS = new Workflows();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowsRecord> getRecordType() {
        return WorkflowsRecord.class;
    }

    /**
     * The column <code>workflows.id</code>. workflow配置自增主键
     */
    public final TableField<WorkflowsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "workflow配置自增主键");

    /**
     * The column <code>workflows.tenant_id</code>. 租户id
     */
    public final TableField<WorkflowsRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(32).nullable(false), this, "租户id");

    /**
     * The column <code>workflows.workflow_id</code>.
     */
    public final TableField<WorkflowsRecord, String> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>workflows.graph</code>. 工作流DAG配置
     */
    public final TableField<WorkflowsRecord, String> GRAPH = createField(DSL.name("graph"), SQLDataType.CLOB.nullable(false), this, "工作流DAG配置");

    /**
     * The column <code>workflows.version</code>. 工作流版本，0: draft, &gt;0 正式版时间戳
     */
    public final TableField<WorkflowsRecord, Long> VERSION = createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "工作流版本，0: draft, >0 正式版时间戳");

    /**
     * The column <code>workflows.cuid</code>.
     */
    public final TableField<WorkflowsRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflows.cu_name</code>.
     */
    public final TableField<WorkflowsRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflows.ctime</code>.
     */
    public final TableField<WorkflowsRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>workflows.muid</code>.
     */
    public final TableField<WorkflowsRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflows.mu_name</code>.
     */
    public final TableField<WorkflowsRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflows.mtime</code>.
     */
    public final TableField<WorkflowsRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Workflows(Name alias, Table<WorkflowsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Workflows(Name alias, Table<WorkflowsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>workflows</code> table reference
     */
    public Workflows(String alias) {
        this(DSL.name(alias), WORKFLOWS);
    }

    /**
     * Create an aliased <code>workflows</code> table reference
     */
    public Workflows(Name alias) {
        this(alias, WORKFLOWS);
    }

    /**
     * Create a <code>workflows</code> table reference
     */
    public Workflows() {
        this(DSL.name("workflows"), null);
    }

    public <O extends Record> Workflows(Table<O> child, ForeignKey<O, WorkflowsRecord> key) {
        super(child, key, WORKFLOWS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOWS_IDX_CUID_TIME, Indexes.WORKFLOWS_IDX_TENANT_ID);
    }

    @Override
    public Identity<WorkflowsRecord, Long> getIdentity() {
        return (Identity<WorkflowsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkflowsRecord> getPrimaryKey() {
        return Keys.KEY_WORKFLOWS_PRIMARY;
    }

    @Override
    public List<UniqueKey<WorkflowsRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowsRecord>>asList(Keys.KEY_WORKFLOWS_PRIMARY, Keys.KEY_WORKFLOWS_IDX_WORKFLOW_ID);
    }

    @Override
    public Workflows as(String alias) {
        return new Workflows(DSL.name(alias), this);
    }

    @Override
    public Workflows as(Name alias) {
        return new Workflows(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Workflows rename(String name) {
        return new Workflows(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Workflows rename(Name name) {
        return new Workflows(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, String, Long, Long, String, LocalDateTime, Long, String, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
