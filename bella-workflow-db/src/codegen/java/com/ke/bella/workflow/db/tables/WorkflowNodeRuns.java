/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Indexes;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.WorkflowNodeRunsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowNodeRuns extends TableImpl<WorkflowNodeRunsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>workflow_node_runs</code>
     */
    public static final WorkflowNodeRuns WORKFLOW_NODE_RUNS = new WorkflowNodeRuns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowNodeRunsRecord> getRecordType() {
        return WorkflowNodeRunsRecord.class;
    }

    /**
     * The column <code>workflow_node_runs.id</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>workflow_node_runs.tenant_id</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>workflow_node_runs.workflow_id</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>workflow_node_runs.workflow_run_id</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> WORKFLOW_RUN_ID = createField(DSL.name("workflow_run_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>workflow_node_runs.node_id</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> NODE_ID = createField(DSL.name("node_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>workflow_node_runs.node_type</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> NODE_TYPE = createField(DSL.name("node_type"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>workflow_node_runs.title</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>workflow_node_runs.inputs</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> INPUTS = createField(DSL.name("inputs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow_node_runs.outputs</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> OUTPUTS = createField(DSL.name("outputs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow_node_runs.error</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow_node_runs.process_data</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> PROCESS_DATA = createField(DSL.name("process_data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow_node_runs.actived_target_handles</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> ACTIVED_TARGET_HANDLES = createField(DSL.name("actived_target_handles"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_node_runs.status</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>workflow_node_runs.elapsed_time</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, Long> ELAPSED_TIME = createField(DSL.name("elapsed_time"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflow_node_runs.cuid</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflow_node_runs.cu_name</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_node_runs.ctime</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>workflow_node_runs.muid</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflow_node_runs.mu_name</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_node_runs.mtime</code>.
     */
    public final TableField<WorkflowNodeRunsRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private WorkflowNodeRuns(Name alias, Table<WorkflowNodeRunsRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowNodeRuns(Name alias, Table<WorkflowNodeRunsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>workflow_node_runs</code> table reference
     */
    public WorkflowNodeRuns(String alias) {
        this(DSL.name(alias), WORKFLOW_NODE_RUNS);
    }

    /**
     * Create an aliased <code>workflow_node_runs</code> table reference
     */
    public WorkflowNodeRuns(Name alias) {
        this(alias, WORKFLOW_NODE_RUNS);
    }

    /**
     * Create a <code>workflow_node_runs</code> table reference
     */
    public WorkflowNodeRuns() {
        this(DSL.name("workflow_node_runs"), null);
    }

    public <O extends Record> WorkflowNodeRuns(Table<O> child, ForeignKey<O, WorkflowNodeRunsRecord> key) {
        super(child, key, WORKFLOW_NODE_RUNS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_NODE_RUNS_IDX_WORKFLOW_ID, Indexes.WORKFLOW_NODE_RUNS_IDX_WORKFLOW_RUNID);
    }

    @Override
    public Identity<WorkflowNodeRunsRecord, Long> getIdentity() {
        return (Identity<WorkflowNodeRunsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkflowNodeRunsRecord> getPrimaryKey() {
        return Keys.KEY_WORKFLOW_NODE_RUNS_PRIMARY;
    }

    @Override
    public List<UniqueKey<WorkflowNodeRunsRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowNodeRunsRecord>>asList(Keys.KEY_WORKFLOW_NODE_RUNS_PRIMARY);
    }

    @Override
    public WorkflowNodeRuns as(String alias) {
        return new WorkflowNodeRuns(DSL.name(alias), this);
    }

    @Override
    public WorkflowNodeRuns as(Name alias) {
        return new WorkflowNodeRuns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowNodeRuns rename(String name) {
        return new WorkflowNodeRuns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowNodeRuns rename(Name name) {
        return new WorkflowNodeRuns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, String, String, String, String, String, String, String, String, String, String, String, String, Long, Long, String, LocalDateTime, Long, String, LocalDateTime> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
