/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.TenantsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tenants extends TableImpl<TenantsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tenants</code>
     */
    public static final Tenants TENANTS = new Tenants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TenantsRecord> getRecordType() {
        return TenantsRecord.class;
    }

    /**
     * The column <code>tenants.id</code>.
     */
    public final TableField<TenantsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>tenants.tenant_id</code>.
     */
    public final TableField<TenantsRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>tenants.tenant_name</code>.
     */
    public final TableField<TenantsRecord, String> TENANT_NAME = createField(DSL.name("tenant_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>tenants.cuid</code>.
     */
    public final TableField<TenantsRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tenants.cu_name</code>.
     */
    public final TableField<TenantsRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>tenants.ctime</code>.
     */
    public final TableField<TenantsRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>tenants.muid</code>.
     */
    public final TableField<TenantsRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>tenants.mu_name</code>.
     */
    public final TableField<TenantsRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>tenants.mtime</code>.
     */
    public final TableField<TenantsRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Tenants(Name alias, Table<TenantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tenants(Name alias, Table<TenantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tenants</code> table reference
     */
    public Tenants(String alias) {
        this(DSL.name(alias), TENANTS);
    }

    /**
     * Create an aliased <code>tenants</code> table reference
     */
    public Tenants(Name alias) {
        this(alias, TENANTS);
    }

    /**
     * Create a <code>tenants</code> table reference
     */
    public Tenants() {
        this(DSL.name("tenants"), null);
    }

    public <O extends Record> Tenants(Table<O> child, ForeignKey<O, TenantsRecord> key) {
        super(child, key, TENANTS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TenantsRecord> getPrimaryKey() {
        return Keys.KEY_TENANTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TenantsRecord>> getKeys() {
        return Arrays.<UniqueKey<TenantsRecord>>asList(Keys.KEY_TENANTS_PRIMARY);
    }

    @Override
    public Tenants as(String alias) {
        return new Tenants(DSL.name(alias), this);
    }

    @Override
    public Tenants as(Name alias) {
        return new Tenants(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenants rename(String name) {
        return new Tenants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenants rename(Name name) {
        return new Tenants(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Long, String, LocalDateTime, Long, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
