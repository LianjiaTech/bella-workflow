/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables.daos;


import com.ke.bella.workflow.db.tables.Workflows;
import com.ke.bella.workflow.db.tables.pojos.WorkflowsDB;
import com.ke.bella.workflow.db.tables.records.WorkflowsRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowsDBDao extends DAOImpl<WorkflowsRecord, WorkflowsDB, Long> {

    /**
     * Create a new WorkflowsDBDao without any configuration
     */
    public WorkflowsDBDao() {
        super(Workflows.WORKFLOWS, WorkflowsDB.class);
    }

    /**
     * Create a new WorkflowsDBDao with an attached configuration
     */
    public WorkflowsDBDao(Configuration configuration) {
        super(Workflows.WORKFLOWS, WorkflowsDB.class, configuration);
    }

    @Override
    public Long getId(WorkflowsDB object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WorkflowsDB> fetchById(Long... values) {
        return fetch(Workflows.WORKFLOWS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WorkflowsDB fetchOneById(Long value) {
        return fetchOne(Workflows.WORKFLOWS.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfTenantId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<WorkflowsDB> fetchByTenantId(String... values) {
        return fetch(Workflows.WORKFLOWS.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>workflow_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfWorkflowId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.WORKFLOW_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_id IN (values)</code>
     */
    public List<WorkflowsDB> fetchByWorkflowId(String... values) {
        return fetch(Workflows.WORKFLOWS.WORKFLOW_ID, values);
    }

    /**
     * Fetch a unique record that has <code>workflow_id = value</code>
     */
    public WorkflowsDB fetchOneByWorkflowId(String value) {
        return fetchOne(Workflows.WORKFLOWS.WORKFLOW_ID, value);
    }

    /**
     * Fetch records that have <code>graph BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfGraph(String lowerInclusive, String upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.GRAPH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>graph IN (values)</code>
     */
    public List<WorkflowsDB> fetchByGraph(String... values) {
        return fetch(Workflows.WORKFLOWS.GRAPH, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfVersion(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<WorkflowsDB> fetchByVersion(Long... values) {
        return fetch(Workflows.WORKFLOWS.VERSION, values);
    }

    /**
     * Fetch records that have <code>cuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfCuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.CUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cuid IN (values)</code>
     */
    public List<WorkflowsDB> fetchByCuid(Long... values) {
        return fetch(Workflows.WORKFLOWS.CUID, values);
    }

    /**
     * Fetch records that have <code>cu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfCuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.CU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cu_name IN (values)</code>
     */
    public List<WorkflowsDB> fetchByCuName(String... values) {
        return fetch(Workflows.WORKFLOWS.CU_NAME, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfCtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<WorkflowsDB> fetchByCtime(LocalDateTime... values) {
        return fetch(Workflows.WORKFLOWS.CTIME, values);
    }

    /**
     * Fetch records that have <code>muid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfMuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.MUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>muid IN (values)</code>
     */
    public List<WorkflowsDB> fetchByMuid(Long... values) {
        return fetch(Workflows.WORKFLOWS.MUID, values);
    }

    /**
     * Fetch records that have <code>mu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfMuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.MU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mu_name IN (values)</code>
     */
    public List<WorkflowsDB> fetchByMuName(String... values) {
        return fetch(Workflows.WORKFLOWS.MU_NAME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowsDB> fetchRangeOfMtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Workflows.WORKFLOWS.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<WorkflowsDB> fetchByMtime(LocalDateTime... values) {
        return fetch(Workflows.WORKFLOWS.MTIME, values);
    }
}
