/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Indexes;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.WorkflowSchedulingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowScheduling extends TableImpl<WorkflowSchedulingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>workflow_scheduling</code>
     */
    public static final WorkflowScheduling WORKFLOW_SCHEDULING = new WorkflowScheduling();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowSchedulingRecord> getRecordType() {
        return WorkflowSchedulingRecord.class;
    }

    /**
     * The column <code>workflow_scheduling.id</code>.
     */
    public final TableField<WorkflowSchedulingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>workflow_scheduling.tenant_id</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_scheduling.trigger_id</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> TRIGGER_ID = createField(DSL.name("trigger_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_scheduling.trigger_type</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> TRIGGER_TYPE = createField(DSL.name("trigger_type"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("SCHD", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_scheduling.name</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_scheduling.desc</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_scheduling.workflow_id</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_scheduling.workflow_scheduling_id</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> WORKFLOW_SCHEDULING_ID = createField(DSL.name("workflow_scheduling_id"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_scheduling.cron_expression</code>. cron表达式
     */
    public final TableField<WorkflowSchedulingRecord, String> CRON_EXPRESSION = createField(DSL.name("cron_expression"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "cron表达式");

    /**
     * The column <code>workflow_scheduling.trigger_next_time</code>.
     */
    public final TableField<WorkflowSchedulingRecord, LocalDateTime> TRIGGER_NEXT_TIME = createField(DSL.name("trigger_next_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>workflow_scheduling.inputs</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> INPUTS = createField(DSL.name("inputs"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>workflow_scheduling.running_status</code>. 调度任务状态；
init:待执行
pending:已有线程在处理,等待提交workflow_run
running:workflow_run进行中
finished:已完成
error:出现异常
:canceled:取消
     */
    public final TableField<WorkflowSchedulingRecord, String> RUNNING_STATUS = createField(DSL.name("running_status"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("init", SQLDataType.VARCHAR)), this, "调度任务状态；\ninit:待执行\npending:已有线程在处理,等待提交workflow_run\nrunning:workflow_run进行中\nfinished:已完成\nerror:出现异常\n:canceled:取消");

    /**
     * The column <code>workflow_scheduling.status</code>.
     */
    public final TableField<WorkflowSchedulingRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>workflow_scheduling.ctime</code>.
     */
    public final TableField<WorkflowSchedulingRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>workflow_scheduling.cu_name</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_scheduling.cuid</code>.
     */
    public final TableField<WorkflowSchedulingRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflow_scheduling.mtime</code>.
     */
    public final TableField<WorkflowSchedulingRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>workflow_scheduling.mu_name</code>.
     */
    public final TableField<WorkflowSchedulingRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_scheduling.muid</code>.
     */
    public final TableField<WorkflowSchedulingRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    private WorkflowScheduling(Name alias, Table<WorkflowSchedulingRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowScheduling(Name alias, Table<WorkflowSchedulingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>workflow_scheduling</code> table reference
     */
    public WorkflowScheduling(String alias) {
        this(DSL.name(alias), WORKFLOW_SCHEDULING);
    }

    /**
     * Create an aliased <code>workflow_scheduling</code> table reference
     */
    public WorkflowScheduling(Name alias) {
        this(alias, WORKFLOW_SCHEDULING);
    }

    /**
     * Create a <code>workflow_scheduling</code> table reference
     */
    public WorkflowScheduling() {
        this(DSL.name("workflow_scheduling"), null);
    }

    public <O extends Record> WorkflowScheduling(Table<O> child, ForeignKey<O, WorkflowSchedulingRecord> key) {
        super(child, key, WORKFLOW_SCHEDULING);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_SCHEDULING_IDX_STATUS_TRIGGER_NEXT_TIME, Indexes.WORKFLOW_SCHEDULING_IDX_WORKFLOW_ID);
    }

    @Override
    public Identity<WorkflowSchedulingRecord, Long> getIdentity() {
        return (Identity<WorkflowSchedulingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkflowSchedulingRecord> getPrimaryKey() {
        return Keys.KEY_WORKFLOW_SCHEDULING_PRIMARY;
    }

    @Override
    public List<UniqueKey<WorkflowSchedulingRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowSchedulingRecord>>asList(Keys.KEY_WORKFLOW_SCHEDULING_PRIMARY, Keys.KEY_WORKFLOW_SCHEDULING_IDX_TRIGGER_ID);
    }

    @Override
    public WorkflowScheduling as(String alias) {
        return new WorkflowScheduling(DSL.name(alias), this);
    }

    @Override
    public WorkflowScheduling as(Name alias) {
        return new WorkflowScheduling(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowScheduling rename(String name) {
        return new WorkflowScheduling(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowScheduling rename(Name name) {
        return new WorkflowScheduling(name, null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<Long, String, String, String, String, String, String, String, String, LocalDateTime, String, String, Integer, LocalDateTime, String, Long, LocalDateTime, String, Long> fieldsRow() {
        return (Row19) super.fieldsRow();
    }
}
