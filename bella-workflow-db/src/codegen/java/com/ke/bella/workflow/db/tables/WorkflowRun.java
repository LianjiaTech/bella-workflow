/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Indexes;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.WorkflowRunRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowRun extends TableImpl<WorkflowRunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>workflow_run</code>
     */
    public static final WorkflowRun WORKFLOW_RUN = new WorkflowRun();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowRunRecord> getRecordType() {
        return WorkflowRunRecord.class;
    }

    /**
     * The column <code>workflow_run.id</code>.
     */
    public final TableField<WorkflowRunRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>workflow_run.tenant_id</code>.
     */
    public final TableField<WorkflowRunRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>workflow_run.workflow_id</code>.
     */
    public final TableField<WorkflowRunRecord, String> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>workflow_run.workflow_run_id</code>.
     */
    public final TableField<WorkflowRunRecord, String> WORKFLOW_RUN_ID = createField(DSL.name("workflow_run_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>workflow_run.trigger_from</code>. 工作流触发来源：
DEBUG
DEBUG_NODE
API


     */
    public final TableField<WorkflowRunRecord, String> TRIGGER_FROM = createField(DSL.name("trigger_from"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "工作流触发来源：\nDEBUG\nDEBUG_NODE\nAPI\n\n");

    /**
     * The column <code>workflow_run.inputs</code>.
     */
    public final TableField<WorkflowRunRecord, String> INPUTS = createField(DSL.name("inputs"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow_run.outputs</code>. 最后一个节点的输出
     */
    public final TableField<WorkflowRunRecord, String> OUTPUTS = createField(DSL.name("outputs"), SQLDataType.CLOB, this, "最后一个节点的输出");

    /**
     * The column <code>workflow_run.status</code>.     
    INIT=‘init’
    RUNNING = 'running'
    SUCCEEDED = 'succeeded'
    FAILED = 'failed'
    STOPPED = 'stopped'

     */
    public final TableField<WorkflowRunRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("init", SQLDataType.VARCHAR)), this, "    \n    INIT=‘init’\n    RUNNING = 'running'\n    SUCCEEDED = 'succeeded'\n    FAILED = 'failed'\n    STOPPED = 'stopped'\n");

    /**
     * The column <code>workflow_run.error</code>.
     */
    public final TableField<WorkflowRunRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow_run.callback_url</code>.
     */
    public final TableField<WorkflowRunRecord, String> CALLBACK_URL = createField(DSL.name("callback_url"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_run.cuid</code>.
     */
    public final TableField<WorkflowRunRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflow_run.cu_name</code>.
     */
    public final TableField<WorkflowRunRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_run.ctime</code>.
     */
    public final TableField<WorkflowRunRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>workflow_run.muid</code>.
     */
    public final TableField<WorkflowRunRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflow_run.mu_name</code>.
     */
    public final TableField<WorkflowRunRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_run.mtime</code>.
     */
    public final TableField<WorkflowRunRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private WorkflowRun(Name alias, Table<WorkflowRunRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowRun(Name alias, Table<WorkflowRunRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>workflow_run</code> table reference
     */
    public WorkflowRun(String alias) {
        this(DSL.name(alias), WORKFLOW_RUN);
    }

    /**
     * Create an aliased <code>workflow_run</code> table reference
     */
    public WorkflowRun(Name alias) {
        this(alias, WORKFLOW_RUN);
    }

    /**
     * Create a <code>workflow_run</code> table reference
     */
    public WorkflowRun() {
        this(DSL.name("workflow_run"), null);
    }

    public <O extends Record> WorkflowRun(Table<O> child, ForeignKey<O, WorkflowRunRecord> key) {
        super(child, key, WORKFLOW_RUN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_RUN_IDX_TENANT_ID, Indexes.WORKFLOW_RUN_IDX_WORKFLOW_ID);
    }

    @Override
    public Identity<WorkflowRunRecord, Long> getIdentity() {
        return (Identity<WorkflowRunRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkflowRunRecord> getPrimaryKey() {
        return Keys.KEY_WORKFLOW_RUN_PRIMARY;
    }

    @Override
    public List<UniqueKey<WorkflowRunRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowRunRecord>>asList(Keys.KEY_WORKFLOW_RUN_PRIMARY, Keys.KEY_WORKFLOW_RUN_IDX_WORKFLOW_RUN_ID);
    }

    @Override
    public WorkflowRun as(String alias) {
        return new WorkflowRun(DSL.name(alias), this);
    }

    @Override
    public WorkflowRun as(Name alias) {
        return new WorkflowRun(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowRun rename(String name) {
        return new WorkflowRun(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowRun rename(Name name) {
        return new WorkflowRun(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, String, String, String, String, String, String, String, String, String, Long, String, LocalDateTime, Long, String, LocalDateTime> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
