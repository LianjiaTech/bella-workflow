/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.InstanceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Instance extends TableImpl<InstanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>instance</code>
     */
    public static final Instance INSTANCE = new Instance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstanceRecord> getRecordType() {
        return InstanceRecord.class;
    }

    /**
     * The column <code>instance.id</code>.
     */
    public final TableField<InstanceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>instance.ip</code>.
     */
    public final TableField<InstanceRecord, String> IP = createField(DSL.name("ip"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>instance.port</code>.
     */
    public final TableField<InstanceRecord, Integer> PORT = createField(DSL.name("port"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>instance.status</code>.
     */
    public final TableField<InstanceRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>instance.ctime</code>.
     */
    public final TableField<InstanceRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>instance.mtime</code>.
     */
    public final TableField<InstanceRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Instance(Name alias, Table<InstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Instance(Name alias, Table<InstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>instance</code> table reference
     */
    public Instance(String alias) {
        this(DSL.name(alias), INSTANCE);
    }

    /**
     * Create an aliased <code>instance</code> table reference
     */
    public Instance(Name alias) {
        this(alias, INSTANCE);
    }

    /**
     * Create a <code>instance</code> table reference
     */
    public Instance() {
        this(DSL.name("instance"), null);
    }

    public <O extends Record> Instance(Table<O> child, ForeignKey<O, InstanceRecord> key) {
        super(child, key, INSTANCE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<InstanceRecord, Long> getIdentity() {
        return (Identity<InstanceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InstanceRecord> getPrimaryKey() {
        return Keys.KEY_INSTANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<InstanceRecord>> getKeys() {
        return Arrays.<UniqueKey<InstanceRecord>>asList(Keys.KEY_INSTANCE_PRIMARY);
    }

    @Override
    public Instance as(String alias) {
        return new Instance(DSL.name(alias), this);
    }

    @Override
    public Instance as(Name alias) {
        return new Instance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Instance rename(String name) {
        return new Instance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Instance rename(Name name) {
        return new Instance(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
