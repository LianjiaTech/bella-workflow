/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables.daos;


import com.ke.bella.workflow.db.tables.WorkflowRun;
import com.ke.bella.workflow.db.tables.pojos.WorkflowRunDB;
import com.ke.bella.workflow.db.tables.records.WorkflowRunRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowRunDBDao extends DAOImpl<WorkflowRunRecord, WorkflowRunDB, Long> {

    /**
     * Create a new WorkflowRunDBDao without any configuration
     */
    public WorkflowRunDBDao() {
        super(WorkflowRun.WORKFLOW_RUN, WorkflowRunDB.class);
    }

    /**
     * Create a new WorkflowRunDBDao with an attached configuration
     */
    public WorkflowRunDBDao(Configuration configuration) {
        super(WorkflowRun.WORKFLOW_RUN, WorkflowRunDB.class, configuration);
    }

    @Override
    public Long getId(WorkflowRunDB object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WorkflowRunDB> fetchById(Long... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WorkflowRunDB fetchOneById(Long value) {
        return fetchOne(WorkflowRun.WORKFLOW_RUN.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfTenantId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByTenantId(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>workflow_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfWorkflowId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.WORKFLOW_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_id IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByWorkflowId(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.WORKFLOW_ID, values);
    }

    /**
     * Fetch records that have <code>workflow_version BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfWorkflowVersion(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.WORKFLOW_VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_version IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByWorkflowVersion(Long... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.WORKFLOW_VERSION, values);
    }

    /**
     * Fetch records that have <code>workflow_run_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfWorkflowRunId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.WORKFLOW_RUN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_run_id IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByWorkflowRunId(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.WORKFLOW_RUN_ID, values);
    }

    /**
     * Fetch a unique record that has <code>workflow_run_id = value</code>
     */
    public WorkflowRunDB fetchOneByWorkflowRunId(String value) {
        return fetchOne(WorkflowRun.WORKFLOW_RUN.WORKFLOW_RUN_ID, value);
    }

    /**
     * Fetch records that have <code>trigger_from BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfTriggerFrom(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.TRIGGER_FROM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>trigger_from IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByTriggerFrom(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.TRIGGER_FROM, values);
    }

    /**
     * Fetch records that have <code>inputs BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfInputs(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.INPUTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>inputs IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByInputs(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.INPUTS, values);
    }

    /**
     * Fetch records that have <code>outputs BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfOutputs(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.OUTPUTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>outputs IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByOutputs(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.OUTPUTS, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByStatus(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.STATUS, values);
    }

    /**
     * Fetch records that have <code>error BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfError(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.ERROR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>error IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByError(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.ERROR, values);
    }

    /**
     * Fetch records that have <code>callback_url BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfCallbackUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.CALLBACK_URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>callback_url IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByCallbackUrl(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.CALLBACK_URL, values);
    }

    /**
     * Fetch records that have <code>cuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfCuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.CUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cuid IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByCuid(Long... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.CUID, values);
    }

    /**
     * Fetch records that have <code>cu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfCuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.CU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cu_name IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByCuName(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.CU_NAME, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfCtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByCtime(LocalDateTime... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.CTIME, values);
    }

    /**
     * Fetch records that have <code>muid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfMuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.MUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>muid IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByMuid(Long... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.MUID, values);
    }

    /**
     * Fetch records that have <code>mu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfMuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.MU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mu_name IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByMuName(String... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.MU_NAME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowRunDB> fetchRangeOfMtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WorkflowRun.WORKFLOW_RUN.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<WorkflowRunDB> fetchByMtime(LocalDateTime... values) {
        return fetch(WorkflowRun.WORKFLOW_RUN.MTIME, values);
    }
}
