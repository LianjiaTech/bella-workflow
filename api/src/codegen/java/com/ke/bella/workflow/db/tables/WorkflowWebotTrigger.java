/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables;


import com.ke.bella.workflow.db.DefaultSchema;
import com.ke.bella.workflow.db.Indexes;
import com.ke.bella.workflow.db.Keys;
import com.ke.bella.workflow.db.tables.records.WorkflowWebotTriggerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row20;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowWebotTrigger extends TableImpl<WorkflowWebotTriggerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>workflow_webot_trigger</code>
     */
    public static final WorkflowWebotTrigger WORKFLOW_WEBOT_TRIGGER = new WorkflowWebotTrigger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkflowWebotTriggerRecord> getRecordType() {
        return WorkflowWebotTriggerRecord.class;
    }

    /**
     * The column <code>workflow_webot_trigger.id</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>workflow_webot_trigger.tenant_id</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_webot_trigger.trigger_type</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> TRIGGER_TYPE = createField(DSL.name("trigger_type"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("WBOT", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_webot_trigger.trigger_id</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> TRIGGER_ID = createField(DSL.name("trigger_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>workflow_webot_trigger.name</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_webot_trigger.desc</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_webot_trigger.chat_id</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> CHAT_ID = createField(DSL.name("chat_id"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_webot_trigger.robot_id</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> ROBOT_ID = createField(DSL.name("robot_id"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_webot_trigger.expression</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> EXPRESSION = createField(DSL.name("expression"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>workflow_webot_trigger.expression_type</code>. 表达式脚本语言类型
     */
    public final TableField<WorkflowWebotTriggerRecord, String> EXPRESSION_TYPE = createField(DSL.name("expression_type"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "表达式脚本语言类型");

    /**
     * The column <code>workflow_webot_trigger.workflow_id</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>workflow_webot_trigger.inputs</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> INPUTS = createField(DSL.name("inputs"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>workflow_webot_trigger.inputKey</code>. 调用工作流的时候作为inputs的一个字段
     */
    public final TableField<WorkflowWebotTriggerRecord, String> INPUTKEY = createField(DSL.name("inputKey"), SQLDataType.VARCHAR(255).nullable(false), this, "调用工作流的时候作为inputs的一个字段");

    /**
     * The column <code>workflow_webot_trigger.status</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>workflow_webot_trigger.cuid</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>workflow_webot_trigger.muid</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>workflow_webot_trigger.cu_name</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_webot_trigger.mu_name</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>workflow_webot_trigger.ctime</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>workflow_webot_trigger.mtime</code>.
     */
    public final TableField<WorkflowWebotTriggerRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private WorkflowWebotTrigger(Name alias, Table<WorkflowWebotTriggerRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkflowWebotTrigger(Name alias, Table<WorkflowWebotTriggerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>workflow_webot_trigger</code> table reference
     */
    public WorkflowWebotTrigger(String alias) {
        this(DSL.name(alias), WORKFLOW_WEBOT_TRIGGER);
    }

    /**
     * Create an aliased <code>workflow_webot_trigger</code> table reference
     */
    public WorkflowWebotTrigger(Name alias) {
        this(alias, WORKFLOW_WEBOT_TRIGGER);
    }

    /**
     * Create a <code>workflow_webot_trigger</code> table reference
     */
    public WorkflowWebotTrigger() {
        this(DSL.name("workflow_webot_trigger"), null);
    }

    public <O extends Record> WorkflowWebotTrigger(Table<O> child, ForeignKey<O, WorkflowWebotTriggerRecord> key) {
        super(child, key, WORKFLOW_WEBOT_TRIGGER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORKFLOW_WEBOT_TRIGGER_IDX_ROBOTID, Indexes.WORKFLOW_WEBOT_TRIGGER_IDX_TENANTID, Indexes.WORKFLOW_WEBOT_TRIGGER_IDX_WORKFLOW_ID);
    }

    @Override
    public Identity<WorkflowWebotTriggerRecord, Long> getIdentity() {
        return (Identity<WorkflowWebotTriggerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkflowWebotTriggerRecord> getPrimaryKey() {
        return Keys.KEY_WORKFLOW_WEBOT_TRIGGER_PRIMARY;
    }

    @Override
    public List<UniqueKey<WorkflowWebotTriggerRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkflowWebotTriggerRecord>>asList(Keys.KEY_WORKFLOW_WEBOT_TRIGGER_PRIMARY, Keys.KEY_WORKFLOW_WEBOT_TRIGGER_IDX_ID);
    }

    @Override
    public WorkflowWebotTrigger as(String alias) {
        return new WorkflowWebotTrigger(DSL.name(alias), this);
    }

    @Override
    public WorkflowWebotTrigger as(Name alias) {
        return new WorkflowWebotTrigger(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowWebotTrigger rename(String name) {
        return new WorkflowWebotTrigger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkflowWebotTrigger rename(Name name) {
        return new WorkflowWebotTrigger(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, String, String, String, String, String, String, String, String, String, String, String, String, Integer, Long, Long, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
