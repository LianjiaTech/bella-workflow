name: Build and Push Bella Workflow Docker Images

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - "main"

concurrency:
  group: build-push-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  BELLA_API_IMAGE_NAME: ${{ vars.BELLA_API_IMAGE_NAME || 'bellatop/bella-workflow-api' }}
  BELLA_WEB_IMAGE_NAME: ${{ vars.BELLA_WEB_IMAGE_NAME || 'bellatop/bella-workflow-web' }}
  BELLA_TASKS_IMAGE_NAME: ${{ vars.BELLA_TASKS_IMAGE_NAME || 'bellatop/bella-workflow-tasks' }}

jobs:
  build:
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'arm64_runner' || 'ubuntu-latest' }}
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    strategy:
      matrix:
        include:
          - service_name: "build-api-amd64"
            image_name_env: "BELLA_API_IMAGE_NAME"
            context: "api"
            platform: linux/amd64
          - service_name: "build-api-arm64"
            image_name_env: "BELLA_API_IMAGE_NAME"
            context: "api"
            platform: linux/arm64
          - service_name: "build-web-amd64"
            image_name_env: "BELLA_WEB_IMAGE_NAME"
            context: "web"
            platform: linux/amd64
          - service_name: "build-web-arm64"
            image_name_env: "BELLA_WEB_IMAGE_NAME"
            context: "web"
            platform: linux/arm64
          - service_name: "build-tasks-amd64"
            image_name_env: "BELLA_TASKS_IMAGE_NAME"
            context: "tasks"
            platform: linux/amd64
          - service_name: "build-tasks-arm64"
            image_name_env: "BELLA_TASKS_IMAGE_NAME"
            context: "tasks"
            platform: linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env[matrix.image_name_env] }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:${{ matrix.context }}"
          platforms: ${{ matrix.platform }}
          build-args: COMMIT_SHA=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env[matrix.image_name_env] }},push-by-digest=${{ github.event_name == 'push' && 'true' || 'false' }},name-canonical=true,push=${{ github.event_name == 'push' && 'true' || 'false' }}
          cache-from: type=gha,scope=${{ matrix.service_name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service_name }}

      - name: Export digest
        if: github.event_name == 'push'
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          mkdir -p /tmp/digests
          sanitized_digest=${DIGEST#sha256:}
          touch "/tmp/digests/${sanitized_digest}"

      - name: Upload digest
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.context }}-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  create-manifest:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        include:
          - service_name: "merge-api-images"
            image_name_env: "BELLA_API_IMAGE_NAME"
            context: "api"
          - service_name: "merge-web-images"
            image_name_env: "BELLA_WEB_IMAGE_NAME"
            context: "web"
          - service_name: "merge-tasks-images"
            image_name_env: "BELLA_TASKS_IMAGE_NAME"
            context: "tasks"
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-${{ matrix.context }}-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env[matrix.image_name_env] }}
          tags: |
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-') }}
            type=ref,event=branch
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
            type=raw,value=${{ github.ref_name }},enable=${{ startsWith(github.ref, 'refs/tags/') }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        env:
          IMAGE_NAME: ${{ env[matrix.image_name_env] }}
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf "$IMAGE_NAME@sha256:%s " *)

      - name: Inspect image
        env:
          IMAGE_NAME: ${{ env[matrix.image_name_env] }}
          IMAGE_VERSION: ${{ steps.meta.outputs.version }}
        run: |
          docker buildx imagetools inspect "$IMAGE_NAME:$IMAGE_VERSION"

  create-release:
    needs: create-manifest
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Check if this is the first release
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
          IS_FIRST_RELEASE=false
          
          if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "${{ github.ref_name }}" ]; then
            IS_FIRST_RELEASE=true
            echo "This is the first release"
          else
            echo "Comparing from $PREVIOUS_TAG to ${{ github.ref_name }}"
          fi
          
          if [ "$IS_FIRST_RELEASE" = true ]; then
            # First release - different format
            echo "## 🎉 Welcome to Bella Workflow ${{ github.ref_name }}" > release_notes.md
            echo "" >> release_notes.md
            echo "This is the **first official release** of Bella Workflow! 🚀" >> release_notes.md
            echo "" >> release_notes.md
            echo "Bella Workflow is a powerful workflow automation platform that helps you build, manage, and monitor complex business processes with ease." >> release_notes.md
            echo "" >> release_notes.md
          
          else
            # Subsequent releases - show changes
            echo "## 🚀 What's New in ${{ github.ref_name }}" > release_notes.md
            echo "" >> release_notes.md
          
            # Get recent feat: commits (up to 3)
            FEAT_COMMITS=$(git log ${PREVIOUS_TAG}..${{ github.sha }} --pretty=format:"- %s" --no-merges --grep="^feat:" | head -3)
            if [ ! -z "$FEAT_COMMITS" ]; then
              echo "### ✨ New Features" >> release_notes.md
              echo "$FEAT_COMMITS" >> release_notes.md
              echo "" >> release_notes.md
            fi
          
            # Get all commits between tags with author information
            echo "### 📝 All Changes" >> release_notes.md
            echo "" >> release_notes.md
          
            # Use git log to get commits with author GitHub username if possible
            git log ${PREVIOUS_TAG}..${{ github.sha }} --no-merges --pretty=format:"- %s (%h) by @%an" >> release_notes.md
            echo "" >> release_notes.md
            echo "" >> release_notes.md
          
            # Contributors section for incremental releases
            echo "### 👥 Contributors" >> release_notes.md
            echo "" >> release_notes.md
          
            # Get unique authors and try to convert to GitHub usernames
            AUTHORS=$(git log ${PREVIOUS_TAG}..${{ github.sha }} --no-merges --pretty=format:"%an <%ae>" | sort -u)
            echo "Thanks to the following contributors:" >> release_notes.md
            echo "" >> release_notes.md
          
            while IFS= read -r author; do
              # Extract name and email
              NAME=$(echo "$author" | sed 's/ <.*$//')
              EMAIL=$(echo "$author" | sed 's/.*<\(.*\)>.*/\1/')
          
              if [[ "$EMAIL" == *"@users.noreply.github.com"* ]]; then
                # Extract GitHub username from GitHub noreply email
                GH_USERNAME=$(echo "$EMAIL" | sed 's/.*+\([^@]*\)@users.noreply.github.com/\1/')
                echo "- @$GH_USERNAME" >> release_notes.md
              elif [[ "$EMAIL" == *"github.com"* ]]; then
                # Handle other GitHub email patterns
                echo "- $NAME" >> release_notes.md
              else
                # For non-GitHub emails, just show the name
                echo "- $NAME" >> release_notes.md
              fi
            done <<< "$AUTHORS"
          
            echo "" >> release_notes.md
          fi
          
          # Add Docker images info
          cat >> release_notes.md << 'EOF'
          ## 📦 Docker Images

          **Version**: `${{ github.ref_name }}`

          **Multi-Architecture Support**: All images support both `linux/amd64` and `linux/arm64` architectures.

          **Deployment**: For detailed deployment instructions, please refer to [docker/README.md](./docker/README.md)

          ### 📋 Build Information
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Git Commit**: `${{ github.sha }}`
          - **Workflow Run**: [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
          
          # Set output for next step
          {
            echo 'RELEASE_BODY<<EOF'
            cat release_notes.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Bella Workflow ${{ github.ref_name }}"
          body: ${{ steps.release_notes.outputs.RELEASE_BODY }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}