/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.workflow.db.tables.daos;


import com.ke.bella.workflow.db.tables.WorkflowNodeRuns;
import com.ke.bella.workflow.db.tables.pojos.WorkflowNodeRunsDB;
import com.ke.bella.workflow.db.tables.records.WorkflowNodeRunsRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkflowNodeRunsDBDao extends DAOImpl<WorkflowNodeRunsRecord, WorkflowNodeRunsDB, Long> {

    /**
     * Create a new WorkflowNodeRunsDBDao without any configuration
     */
    public WorkflowNodeRunsDBDao() {
        super(WorkflowNodeRuns.WORKFLOW_NODE_RUNS, WorkflowNodeRunsDB.class);
    }

    /**
     * Create a new WorkflowNodeRunsDBDao with an attached configuration
     */
    public WorkflowNodeRunsDBDao(Configuration configuration) {
        super(WorkflowNodeRuns.WORKFLOW_NODE_RUNS, WorkflowNodeRunsDB.class, configuration);
    }

    @Override
    public Long getId(WorkflowNodeRunsDB object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchById(Long... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public WorkflowNodeRunsDB fetchOneById(Long value) {
        return fetchOne(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.ID, value);
    }

    /**
     * Fetch records that have <code>tenant_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfTenantId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.TENANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tenant_id IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByTenantId(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.TENANT_ID, values);
    }

    /**
     * Fetch records that have <code>workflow_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfWorkflowId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.WORKFLOW_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_id IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByWorkflowId(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.WORKFLOW_ID, values);
    }

    /**
     * Fetch records that have <code>workflow_run_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfWorkflowRunId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.WORKFLOW_RUN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workflow_run_id IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByWorkflowRunId(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.WORKFLOW_RUN_ID, values);
    }

    /**
     * Fetch records that have <code>node_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfNodeId(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.NODE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>node_id IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByNodeId(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.NODE_ID, values);
    }

    /**
     * Fetch records that have <code>node_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfNodeType(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.NODE_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>node_type IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByNodeType(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.NODE_TYPE, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByTitle(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.TITLE, values);
    }

    /**
     * Fetch records that have <code>inputs BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfInputs(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.INPUTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>inputs IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByInputs(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.INPUTS, values);
    }

    /**
     * Fetch records that have <code>outputs BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfOutputs(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.OUTPUTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>outputs IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByOutputs(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.OUTPUTS, values);
    }

    /**
     * Fetch records that have <code>error BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfError(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.ERROR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>error IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByError(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.ERROR, values);
    }

    /**
     * Fetch records that have <code>process_data BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfProcessData(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.PROCESS_DATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>process_data IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByProcessData(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.PROCESS_DATA, values);
    }

    /**
     * Fetch records that have <code>actived_target_handles BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfActivedTargetHandles(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.ACTIVED_TARGET_HANDLES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>actived_target_handles IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByActivedTargetHandles(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.ACTIVED_TARGET_HANDLES, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByStatus(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.STATUS, values);
    }

    /**
     * Fetch records that have <code>elapsed_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfElapsedTime(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.ELAPSED_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>elapsed_time IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByElapsedTime(Long... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.ELAPSED_TIME, values);
    }

    /**
     * Fetch records that have <code>cuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfCuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.CUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cuid IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByCuid(Long... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.CUID, values);
    }

    /**
     * Fetch records that have <code>cu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfCuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.CU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cu_name IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByCuName(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.CU_NAME, values);
    }

    /**
     * Fetch records that have <code>ctime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfCtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.CTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ctime IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByCtime(LocalDateTime... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.CTIME, values);
    }

    /**
     * Fetch records that have <code>muid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfMuid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.MUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>muid IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByMuid(Long... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.MUID, values);
    }

    /**
     * Fetch records that have <code>mu_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfMuName(String lowerInclusive, String upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.MU_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mu_name IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByMuName(String... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.MU_NAME, values);
    }

    /**
     * Fetch records that have <code>mtime BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<WorkflowNodeRunsDB> fetchRangeOfMtime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.MTIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mtime IN (values)</code>
     */
    public List<WorkflowNodeRunsDB> fetchByMtime(LocalDateTime... values) {
        return fetch(WorkflowNodeRuns.WORKFLOW_NODE_RUNS.MTIME, values);
    }
}
